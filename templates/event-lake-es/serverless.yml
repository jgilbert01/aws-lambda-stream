service: event-lake-es

provider:
  name: aws
  # cfnRole: arn:aws:iam::${self:custom.accounts.${opt:acct}.accountNumber}:role/cfnRole
  # deploymentBucket: myprefix-${opt:acct}-${opt:region}-serverlessdeploymentbucket

custom:
  accounts:
    dev:
      # accountNumber: 2109876543210
    prod:
      # accountNumber: 0123456789012

plugins:
  - elasticsearch # create template (local plugin)
resources:
  Resources:
    Domain:
      Type: AWS::Elasticsearch::Domain
      Properties:
        ElasticsearchVersion: 7.9
        ElasticsearchClusterConfig: 
          DedicatedMasterEnabled: false
          InstanceCount: 1
          ZoneAwarenessEnabled: false
          InstanceType: t2.small.elasticsearch
        EBSOptions: 
          EBSEnabled: true
          Iops: 0
          VolumeSize: 10
          VolumeType: gp2
        SnapshotOptions: 
          AutomatedSnapshotStartHour: 0
        AccessPolicies: 
          Statement: 
            - Effect: Allow
              Principal: 
                AWS: '*' # arn:aws:iam::${self:custom.accounts.${opt:acct}.accountNumber}:user/*
              Action: 'es:*'
              Resource: 'arn:aws:es:${opt:region}:${self:custom.accounts.${opt:acct}.accountNumber}:domain/event-lake*/*'
        AdvancedOptions: 
          rest.action.multi.allow_explicit_index: true

    DeliveryStream:
      Type: AWS::KinesisFirehose::DeliveryStream
      Properties:
        DeliveryStreamType: DirectPut
        ElasticsearchDestinationConfiguration: 
          DomainARN: 
            Fn::GetAtt: [ Domain, DomainArn ]
          IndexName: events
          IndexRotationPeriod: OneDay
          TypeName: event
          BufferingHints:
            IntervalInSeconds: 60
            SizeInMBs: 50
          RetryOptions: 
            DurationInSeconds: 60
          RoleARN:
            Fn::GetAtt: [ DeliveryRole, Arn ]
          CloudWatchLoggingOptions: ${file(includes.yml):CloudWatchLoggingOptions}
          S3BackupMode: FailedDocumentsOnly
          S3Configuration: ${file(includes.yml):S3Configuration}

    Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256

    LogGroup: ${file(includes.yml):LogGroup}
    LogStream: ${file(includes.yml):LogStream}
    EventBridgeRole: ${file(includes.yml):EventBridgeRole}
    DeliveryRole: ${file(includes.yml):DeliveryRole}

    EventRule: 
      Type: AWS::Events::Rule
      Properties: 
        EventBusName: ${cf:event-hub-${opt:stage}.busName}
        EventPattern: 
          source: 
            - custom
        State: ENABLED
        Targets: 
          - Id: EventLake
            Arn: 
              Fn::GetAtt: [ DeliveryStream, Arn ]
            RoleArn:
              Fn::GetAtt: [ EventBridgeRole, Arn ]

  Outputs:
    DomainArn:
      Value:
        Fn::GetAtt: [ Domain, DomainArn ]
    DomainEndpoint:
      Value:
        Fn::GetAtt: [ Domain, DomainEndpoint ]
    KibanaEndpoint:
      Value:
        Fn::Join:
          - ''
          - - Fn::GetAtt: [ Domain, DomainEndpoint ]
            - '/_plugin/kibana'
