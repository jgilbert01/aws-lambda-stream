service: my-service

provider:
  name: aws
  # cfnRole: arn:aws:iam::${self:custom.accounts.${opt:acct}.accountNumber}:role/cfnRole
  # deploymentBucket: myprefix-${opt:acct}-${opt:region}-serverlessdeploymentbucket
  runtime: nodejs12.x
  environment:
    ACCOUNT_NAME: ${opt:acct}
    PROJECT: ${self:service}
    STAGE: ${opt:stage}
    DEBUG: ${self:custom.accounts.${opt:acct}.debug}
    EVENT_TABLE_NAME: ${opt:stage}-${self:service}-events
    BUS_NAME: ${cf:event-hub-${opt:stage}.busName}
    BUS_ARN: ${cf:event-hub-${opt:stage}.busArn}
    STREAM_ARN: ${cf:event-hub-${opt:stage}.stream1Arn}
    # MASTER_KEY_ALIAS: ${cf:global-resources-${opt:stage}.MasterKeyAlias}
    # MASTER_KEY_ARN: ${cf:resources-${opt:stage}.MasterKeyArn}
    # KMS_REGIONS: us-east-1,us-west-2
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:Query
      Resource:
        Fn::GetAtt: [ EventsTable, Arn ]
    - Effect: Allow
      Action:
        - events:PutEvents
      Resource: ${self:provider.environment.BUS_ARN}
    # - Effect: Allow
    #   Action:
    #     - kms:GenerateDataKey
    #     - kms:Encrypt
    #     - kms:Decrypt
    #   Resource: ${self:provider.environment.MASTER_KEY_ARN}

package:
  individually: true

custom:
  webpack:
    includeModules: true
  accounts:
    dev:
      # accountNumber: 123456789012
      debug: '*'
    prod:
      # accountNumber: 123456789012
      debug: ''
  autoscaling:
    - table: EventsTable
      global: true

plugins:
  - serverless-dynamodb-autoscaling-plugin
  - serverless-dynamodb-global-table-plugin
  - serverless-webpack
  - baton-vcr-serverless-plugin
  - serverless-offline

functions:
  listener:
    handler: src/listener/index.handle
    events:
      - stream:
          type: kinesis
          arn: ${self:provider.environment.STREAM_ARN}
          batchSize: 100
          startingPosition: TRIM_HORIZON
  trigger:
    handler: src/trigger/index.handle
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt: [ EventsTable, StreamArn ]
          batchSize: 100
          startingPosition: TRIM_HORIZON

resources:
  Resources:
    EventsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.EVENT_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
          - AttributeName: sk
            AttributeType: S
          # - AttributeName: data
          #   AttributeType: S
          # - AttributeName: sequenceNumber
          #   AttributeType: S
          # - AttributeName: timestamp
          #   AttributeType: N
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
          - AttributeName: sk
            KeyType: RANGE
        # GlobalSecondaryIndexes:
        #   - IndexName: DataIndex
        #     KeySchema:
        #       - AttributeName: data
        #         KeyType: HASH
        #       - AttributeName: timestamp
        #         KeyType: RANGE
        #     Projection:
        #       ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true
        # SSESpecification:
        #   SSEEnabled: true
