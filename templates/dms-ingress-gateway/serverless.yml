service: dms-ingress-gateway

provider:
  name: aws
  # cfnRole: arn:aws:iam::${self:custom.accounts.${opt:acct}.accountNumber}:role/cfnRole
  # deploymentBucket: myprefix-${opt:acct}-${opt:region}-serverlessdeploymentbucket
  runtime: nodejs12.x

custom:
  accounts:
    dev:
      # accountNumber: 123456789012
      shardCount: 1
    prod:
      # accountNumber: 123456789012
      shardCount: 1

functions:
  listener:
    handler: handler.listener
    events:
      - stream:
          type: kinesis
          arn:
            Fn::GetAtt: [ Stream1, Arn ]
          batchSize: 100
          startingPosition: TRIM_HORIZON

resources:
  Resources:
    DBParameterGroup:
      Type: AWS::RDS::DBParameterGroup
      Properties:
        Description: ${self:service}-${opt:stage}-pg
        Family: postgres12
        Parameters:
          rds.logical_replication: 1

    Rds: # this resource will live external to the gateway
      Type: AWS::RDS::DBInstance
      Properties:
        AllocatedStorage: 5
        DBInstanceClass: db.t3.micro
        Engine: postgres
        MasterUsername: demo
        MasterUserPassword: demo001!
        PubliclyAccessible: true
        DBParameterGroupName:
          Ref: DBParameterGroup

    SourceEndpoint:
      Type: AWS::DMS::Endpoint
      Properties:
        EndpointType: source
        EngineName: postgres
        DatabaseName: postgres
        ServerName:
          Fn::GetAtt: [ Rds, Endpoint.Address ]
        Port:
          Fn::GetAtt: [ Rds, Endpoint.Port ]
        Username: demo
        Password: demo001!

    TargetEndpoint:
      Type: AWS::DMS::Endpoint
      Properties:
        EndpointType: target
        EngineName: kinesis
        KinesisSettings:
          ServiceAccessRoleArn:
            Fn::GetAtt: [ ServiceAccessRole, Arn ]
          StreamArn:
            Fn::GetAtt: [ Stream1, Arn ]
          MessageFormat: JSON

    ReplicationInstance:
      Type: AWS::DMS::ReplicationInstance
      DependsOn:
        - DmsVpcRole
      Properties:
        ReplicationInstanceClass: dms.t3.micro

    ReplicationTask:
      Type: AWS::DMS::ReplicationTask
      Properties:
        MigrationType: full-load-and-cdc
        ReplicationInstanceArn:
          Ref: ReplicationInstance
        SourceEndpointArn:
          Ref: SourceEndpoint
        TargetEndpointArn:
          Ref: TargetEndpoint
        TableMappings: ${file(./mappings.js):tableMappings}

    ServiceAccessRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service: dms.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: delivery
            PolicyDocument:
              Statement:
                - Effect: Allow
                  Action:
                    - kinesis:PutRecord
                    - kinesis:PutRecords
                    - kinesis:DescribeStream
                  Resource:
                    - Fn::GetAtt: [ Stream1, Arn ]

    DmsVpcRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: dms-vpc-role
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service: dms.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AmazonDMSVPCManagementRole

    Stream1:
      Type: AWS::Kinesis::Stream
      Properties:
        Name: ${self:service}-${opt:stage}-s1
        RetentionPeriodHours: 24
        ShardCount: ${self:custom.accounts.${opt:acct}.shardCount}
