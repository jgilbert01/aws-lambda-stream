service: event-fault-monitor

provider:
  name: aws
  # cfnRole: arn:aws:iam::${self:custom.accounts.${opt:acct}.accountNumber}:role/cfnRole
  # deploymentBucket: myprefix-${opt:acct}-${opt:region}-serverlessdeploymentbucket
  runtime: nodejs14.x
  environment:
    ACCOUNT_NAME: ${opt:acct}
    PROJECT: ${self:service}
    STAGE: ${opt:stage}
    DEBUG:  ${self:custom.accounts.${opt:acct}.debug}
    STREAM_ARN: ${cf:event-hub-${opt:stage}.stream1Arn}
    NAMESPACE: my-ns
    TOPIC_ARN: ${self:custom.accounts.${opt:acct}.criticalAlarmTopicArn}
  iamRoleStatements:
    - Effect: Allow
      Action: cloudwatch:PutMetricData
      Resource: '*'
    - Effect: Allow
      Action: sns:Publish
      Resource:
        - ${self:custom.accounts.${opt:acct}.criticalAlarmTopicArn}

package:
  individually: true

custom:
  webpack:
    includeModules: true
  accounts:
    dev:
      # accountNumber: 123456789012
      debug: '*'
      # warningAlarmTopicArn: #{cf:my-monitoring-${opt:stage}.warningAlarmTopicArn}
      # criticalAlarmTopicArn: #{cf:my-monitoring-${opt:stage}.criticalAlarmTopicArn} 
    prod:
      # accountNumber: 123456789012
      debug: ''

plugins:
  - serverless-webpack
  - baton-vcr-serverless-plugin
  - serverless-offline

functions:
  trigger:
    handler: src/trigger/index.handle
    events:
      - sqs:
          arn:
            Fn::GetAtt: [ Queue, Arn ]

resources:
  Resources:
    Bucket:
      Type: AWS::S3::Bucket
      DeletionPolicy: Retain
      DependsOn: [ Topic, TopicPolicy ]
      Properties:
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256
        VersioningConfiguration:
          Status: Enabled
        NotificationConfiguration: ${file(includes.yml):NotificationConfiguration}
    
    Topic: ${file(includes.yml):Topic}
    TopicPolicy: ${file(includes.yml):TopicPolicy}
    Queue: ${file(includes.yml):Queue}
    QueuePolicy: ${file(includes.yml):QueuePolicy}
    Subscription: ${file(includes.yml):Subscription}

    DeliveryStream:
      Type: AWS::KinesisFirehose::DeliveryStream
      Properties:
        DeliveryStreamType: DirectPut
        ExtendedS3DestinationConfiguration:
          BucketARN:
            Fn::GetAtt: [ Bucket, Arn ]
          Prefix: ${opt:region}/
          BufferingHints:
            IntervalInSeconds: 60
            SizeInMBs: 50
          CompressionFormat: UNCOMPRESSED
          RoleARN:
            Fn::GetAtt: [ DeliveryRole, Arn ]
          CloudWatchLoggingOptions: ${file(includes.yml):CloudWatchLoggingOptions}

    LogGroup: ${file(includes.yml):LogGroup}
    LogStream: ${file(includes.yml):LogStream}

    DeliveryRole: ${file(includes.yml):DeliveryRole}
    EventBridgeRole: ${file(includes.yml):EventBridgeRole}

    EventRule: 
      Type: AWS::Events::Rule
      Properties: 
        EventBusName: ${cf:event-hub-${opt:stage}.busName}
        EventPattern: 
          detail: 
            type: 
              - fault
        State: ENABLED
        Targets: 
          - Id: EventFaults
            Arn: 
              Fn::GetAtt: [ DeliveryStream, Arn ]
            RoleArn:
              Fn::GetAtt: [ EventBridgeRole, Arn ]
            InputTransformer:
              InputTemplate: "<aws.events.event>\n" # the EOL supports parsing in cli

  Outputs:
    BucketName:
      Value:
        Ref: Bucket
    BucketArn:
      Value:
        Fn::GetAtt: [ Bucket, Arn ]
